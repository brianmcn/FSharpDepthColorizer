// Implementation file for parser generated by fsyacc
module internal Microsoft.FSharp.Compiler.AbstractIL.Internal.AsciiParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Compiler.AbstractIL
open Internal.Utilities.Text.Lexing
open Internal.Utilities.Text.Parsing.ParseHelpers
# 1 "ilpars.fsy"

//----------------------------------------------------------------------------
//
// Copyright (c) 2002-2010 Microsoft Corporation. 
//
// This source code is subject to terms and conditions of the Apache License, Version 2.0. A 
// copy of the license can be found in the License.html file at the root of this distribution. 
// By using this source code in any fashion, you are agreeing to be bound 
// by the terms of the Apache License, Version 2.0.
//
// You must not remove this notice, or any other, from this software.
//----------------------------------------------------------------------------

#nowarn "1182"  // the generated code often has unused variable "parseState"

open Internal.Utilities
open Internal.Utilities.Text

open Microsoft.FSharp.Compiler.AbstractIL 
open Microsoft.FSharp.Compiler.AbstractIL.Internal 
open Microsoft.FSharp.Compiler.AbstractIL.Internal.AsciiConstants 
open Microsoft.FSharp.Compiler.AbstractIL.Diagnostics 
open Microsoft.FSharp.Compiler.AbstractIL.Extensions.ILX.Types 
open Microsoft.FSharp.Compiler.AbstractIL.IL 
open Microsoft.FSharp.Compiler.AbstractIL.Internal.Library 

  
let pfailwith s = 
    stderr.WriteLine ("*** error: "+s); 
    raise Parsing.RecoverableParseError 

/// vararg sentinels
type SigArg = SigArg of (string option * ILType)  | Sentinel

let decodeVarargs args = 
  let rec normals = function 
    | [] -> ([],None)
    | Sentinel :: t -> ([],Some (varargs t))
    | SigArg (_,p)::t -> let (n,r) = normals t in (p::n, r)
  and varargs = function 
    | [] -> []
    | SigArg (_,ty):: t ->  let l = varargs t in ty::l
    | Sentinel :: t -> pfailwith "two sentinels in vararg call"
  normals args


type ResolvedAtMethodSpecScope<'T> = 
    ResolvedAtMethodSpecScope of (ILGenericParameterDefs -> 'T)

let noMethodSpecScope x = ResolvedAtMethodSpecScope (fun _cgparams -> x)
let resolveMethodSpecScope (ResolvedAtMethodSpecScope f) x = f x
let resolveMethodSpecScopeThen (ResolvedAtMethodSpecScope f) g = 
  ResolvedAtMethodSpecScope (fun x -> resolveMethodSpecScope (g(f x)) x)

let resolveFormalMethodSpecScope tspeco obj = 
  match tspeco with 
    None ->  resolveMethodSpecScope obj mkILEmptyGenericParams
  | Some (tspec:ILTypeSpec) -> resolveMethodSpecScope obj (mkILFormalTypars tspec.GenericArgs)

let resolveCurrentMethodSpecScope obj = 
    resolveMethodSpecScope obj mkILEmptyGenericParams


let findMscorlibAssemblyRef() = 
  match (!parseILGlobals).mscorlibScopeRef with
  | ILScopeRef.Assembly aref -> aref
  | _ -> pfailwith "mscorlibScopeRef not set to valid assembly reference in parseILGlobals"

let findAssemblyRef nm = 
  if nm = "mscorlib" then findMscorlibAssemblyRef() else
  pfailwith ("Undefined assembly ref '" + nm + "'") 


# 81 "ilpars.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VOID
  | VARARG
  | VALUETYPE
  | VALUE
  | UNSIGNED
  | UNMANAGED
  | UINT8
  | UINT64
  | UINT32
  | UINT16
  | UINT
  | STRING
  | STAR
  | SLASH
  | RPAREN
  | RBRACK
  | PLUS
  | OBJECT
  | NATIVE
  | METHOD
  | LPAREN
  | LESS
  | LBRACK
  | INT8
  | INT64
  | INT32
  | INT16
  | INT
  | INSTANCE
  | GREATER
  | FLOAT64
  | FLOAT32
  | FIELD
  | EXPLICIT
  | EOF
  | ELIPSES
  | DOT
  | DEFAULT
  | DCOLON
  | COMMA
  | CLASS
  | CHAR
  | BYTEARRAY
  | BOOL
  | BANG
  | AMP
  | VAL_SQSTRING of (string)
  | VAL_QSTRING of (string)
  | VAL_DOTTEDNAME of (string)
  | VAL_ID of (string)
  | VAL_HEXBYTE of (int)
  | INSTR_VALUETYPE of (ValueTypeInstr)
  | INSTR_INT_TYPE of (IntTypeInstr)
  | INSTR_TYPE of (TypeInstr)
  | INSTR_TOK of (TokenInstr)
  | INSTR_STRING of (StringInstr)
  | INSTR_NONE of (NoArgInstr)
  | INSTR_METHOD of (MethodSpecInstr)
  | INSTR_R of (DoubleInstr)
  | INSTR_I8 of (Int64Instr)
  | INSTR_I32_I32 of (Int32Int32Instr)
  | INSTR_I of (Int32Instr)
  | VAL_FLOAT64 of (double)
  | VAL_INT32_ELIPSES of (int32)
  | VAL_INT64 of (int64)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VOID
    | TOKEN_VARARG
    | TOKEN_VALUETYPE
    | TOKEN_VALUE
    | TOKEN_UNSIGNED
    | TOKEN_UNMANAGED
    | TOKEN_UINT8
    | TOKEN_UINT64
    | TOKEN_UINT32
    | TOKEN_UINT16
    | TOKEN_UINT
    | TOKEN_STRING
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_RPAREN
    | TOKEN_RBRACK
    | TOKEN_PLUS
    | TOKEN_OBJECT
    | TOKEN_NATIVE
    | TOKEN_METHOD
    | TOKEN_LPAREN
    | TOKEN_LESS
    | TOKEN_LBRACK
    | TOKEN_INT8
    | TOKEN_INT64
    | TOKEN_INT32
    | TOKEN_INT16
    | TOKEN_INT
    | TOKEN_INSTANCE
    | TOKEN_GREATER
    | TOKEN_FLOAT64
    | TOKEN_FLOAT32
    | TOKEN_FIELD
    | TOKEN_EXPLICIT
    | TOKEN_EOF
    | TOKEN_ELIPSES
    | TOKEN_DOT
    | TOKEN_DEFAULT
    | TOKEN_DCOLON
    | TOKEN_COMMA
    | TOKEN_CLASS
    | TOKEN_CHAR
    | TOKEN_BYTEARRAY
    | TOKEN_BOOL
    | TOKEN_BANG
    | TOKEN_AMP
    | TOKEN_VAL_SQSTRING
    | TOKEN_VAL_QSTRING
    | TOKEN_VAL_DOTTEDNAME
    | TOKEN_VAL_ID
    | TOKEN_VAL_HEXBYTE
    | TOKEN_INSTR_VALUETYPE
    | TOKEN_INSTR_INT_TYPE
    | TOKEN_INSTR_TYPE
    | TOKEN_INSTR_TOK
    | TOKEN_INSTR_STRING
    | TOKEN_INSTR_NONE
    | TOKEN_INSTR_METHOD
    | TOKEN_INSTR_R
    | TOKEN_INSTR_I8
    | TOKEN_INSTR_I32_I32
    | TOKEN_INSTR_I
    | TOKEN_VAL_FLOAT64
    | TOKEN_VAL_INT32_ELIPSES
    | TOKEN_VAL_INT64
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startilInstrs
    | NONTERM__startilType
    | NONTERM_ilType
    | NONTERM_ilInstrs
    | NONTERM_compQstring
    | NONTERM_methodName
    | NONTERM_instrs2
    | NONTERM_methodSpecMaybeArrayMethod
    | NONTERM_instr
    | NONTERM_sigArgs0
    | NONTERM_sigArgs1
    | NONTERM_sigArgs1a
    | NONTERM_sigArg
    | NONTERM_opt_id
    | NONTERM_name1
    | NONTERM_className
    | NONTERM_slashedName
    | NONTERM_typeNameInst
    | NONTERM_typeName
    | NONTERM_typSpec
    | NONTERM_callConv
    | NONTERM_callKind
    | NONTERM_typ
    | NONTERM_bounds1
    | NONTERM_bound
    | NONTERM_id
    | NONTERM_int32
    | NONTERM_int64
    | NONTERM_float64
    | NONTERM_opt_actual_tyargs
    | NONTERM_actual_tyargs
    | NONTERM_actualTypSpecs

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | VOID  -> 0 
  | VARARG  -> 1 
  | VALUETYPE  -> 2 
  | VALUE  -> 3 
  | UNSIGNED  -> 4 
  | UNMANAGED  -> 5 
  | UINT8  -> 6 
  | UINT64  -> 7 
  | UINT32  -> 8 
  | UINT16  -> 9 
  | UINT  -> 10 
  | STRING  -> 11 
  | STAR  -> 12 
  | SLASH  -> 13 
  | RPAREN  -> 14 
  | RBRACK  -> 15 
  | PLUS  -> 16 
  | OBJECT  -> 17 
  | NATIVE  -> 18 
  | METHOD  -> 19 
  | LPAREN  -> 20 
  | LESS  -> 21 
  | LBRACK  -> 22 
  | INT8  -> 23 
  | INT64  -> 24 
  | INT32  -> 25 
  | INT16  -> 26 
  | INT  -> 27 
  | INSTANCE  -> 28 
  | GREATER  -> 29 
  | FLOAT64  -> 30 
  | FLOAT32  -> 31 
  | FIELD  -> 32 
  | EXPLICIT  -> 33 
  | EOF  -> 34 
  | ELIPSES  -> 35 
  | DOT  -> 36 
  | DEFAULT  -> 37 
  | DCOLON  -> 38 
  | COMMA  -> 39 
  | CLASS  -> 40 
  | CHAR  -> 41 
  | BYTEARRAY  -> 42 
  | BOOL  -> 43 
  | BANG  -> 44 
  | AMP  -> 45 
  | VAL_SQSTRING _ -> 46 
  | VAL_QSTRING _ -> 47 
  | VAL_DOTTEDNAME _ -> 48 
  | VAL_ID _ -> 49 
  | VAL_HEXBYTE _ -> 50 
  | INSTR_VALUETYPE _ -> 51 
  | INSTR_INT_TYPE _ -> 52 
  | INSTR_TYPE _ -> 53 
  | INSTR_TOK _ -> 54 
  | INSTR_STRING _ -> 55 
  | INSTR_NONE _ -> 56 
  | INSTR_METHOD _ -> 57 
  | INSTR_R _ -> 58 
  | INSTR_I8 _ -> 59 
  | INSTR_I32_I32 _ -> 60 
  | INSTR_I _ -> 61 
  | VAL_FLOAT64 _ -> 62 
  | VAL_INT32_ELIPSES _ -> 63 
  | VAL_INT64 _ -> 64 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VOID 
  | 1 -> TOKEN_VARARG 
  | 2 -> TOKEN_VALUETYPE 
  | 3 -> TOKEN_VALUE 
  | 4 -> TOKEN_UNSIGNED 
  | 5 -> TOKEN_UNMANAGED 
  | 6 -> TOKEN_UINT8 
  | 7 -> TOKEN_UINT64 
  | 8 -> TOKEN_UINT32 
  | 9 -> TOKEN_UINT16 
  | 10 -> TOKEN_UINT 
  | 11 -> TOKEN_STRING 
  | 12 -> TOKEN_STAR 
  | 13 -> TOKEN_SLASH 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_RBRACK 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_OBJECT 
  | 18 -> TOKEN_NATIVE 
  | 19 -> TOKEN_METHOD 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_LESS 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_INT8 
  | 24 -> TOKEN_INT64 
  | 25 -> TOKEN_INT32 
  | 26 -> TOKEN_INT16 
  | 27 -> TOKEN_INT 
  | 28 -> TOKEN_INSTANCE 
  | 29 -> TOKEN_GREATER 
  | 30 -> TOKEN_FLOAT64 
  | 31 -> TOKEN_FLOAT32 
  | 32 -> TOKEN_FIELD 
  | 33 -> TOKEN_EXPLICIT 
  | 34 -> TOKEN_EOF 
  | 35 -> TOKEN_ELIPSES 
  | 36 -> TOKEN_DOT 
  | 37 -> TOKEN_DEFAULT 
  | 38 -> TOKEN_DCOLON 
  | 39 -> TOKEN_COMMA 
  | 40 -> TOKEN_CLASS 
  | 41 -> TOKEN_CHAR 
  | 42 -> TOKEN_BYTEARRAY 
  | 43 -> TOKEN_BOOL 
  | 44 -> TOKEN_BANG 
  | 45 -> TOKEN_AMP 
  | 46 -> TOKEN_VAL_SQSTRING 
  | 47 -> TOKEN_VAL_QSTRING 
  | 48 -> TOKEN_VAL_DOTTEDNAME 
  | 49 -> TOKEN_VAL_ID 
  | 50 -> TOKEN_VAL_HEXBYTE 
  | 51 -> TOKEN_INSTR_VALUETYPE 
  | 52 -> TOKEN_INSTR_INT_TYPE 
  | 53 -> TOKEN_INSTR_TYPE 
  | 54 -> TOKEN_INSTR_TOK 
  | 55 -> TOKEN_INSTR_STRING 
  | 56 -> TOKEN_INSTR_NONE 
  | 57 -> TOKEN_INSTR_METHOD 
  | 58 -> TOKEN_INSTR_R 
  | 59 -> TOKEN_INSTR_I8 
  | 60 -> TOKEN_INSTR_I32_I32 
  | 61 -> TOKEN_INSTR_I 
  | 62 -> TOKEN_VAL_FLOAT64 
  | 63 -> TOKEN_VAL_INT32_ELIPSES 
  | 64 -> TOKEN_VAL_INT64 
  | 67 -> TOKEN_end_of_input
  | 65 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startilInstrs 
    | 1 -> NONTERM__startilType 
    | 2 -> NONTERM_ilType 
    | 3 -> NONTERM_ilInstrs 
    | 4 -> NONTERM_compQstring 
    | 5 -> NONTERM_compQstring 
    | 6 -> NONTERM_methodName 
    | 7 -> NONTERM_instrs2 
    | 8 -> NONTERM_instrs2 
    | 9 -> NONTERM_methodSpecMaybeArrayMethod 
    | 10 -> NONTERM_instr 
    | 11 -> NONTERM_instr 
    | 12 -> NONTERM_instr 
    | 13 -> NONTERM_instr 
    | 14 -> NONTERM_instr 
    | 15 -> NONTERM_instr 
    | 16 -> NONTERM_instr 
    | 17 -> NONTERM_instr 
    | 18 -> NONTERM_instr 
    | 19 -> NONTERM_instr 
    | 20 -> NONTERM_instr 
    | 21 -> NONTERM_sigArgs0 
    | 22 -> NONTERM_sigArgs0 
    | 23 -> NONTERM_sigArgs1 
    | 24 -> NONTERM_sigArgs1a 
    | 25 -> NONTERM_sigArgs1a 
    | 26 -> NONTERM_sigArg 
    | 27 -> NONTERM_opt_id 
    | 28 -> NONTERM_opt_id 
    | 29 -> NONTERM_name1 
    | 30 -> NONTERM_name1 
    | 31 -> NONTERM_name1 
    | 32 -> NONTERM_className 
    | 33 -> NONTERM_className 
    | 34 -> NONTERM_slashedName 
    | 35 -> NONTERM_slashedName 
    | 36 -> NONTERM_typeNameInst 
    | 37 -> NONTERM_typeName 
    | 38 -> NONTERM_typSpec 
    | 39 -> NONTERM_typSpec 
    | 40 -> NONTERM_typSpec 
    | 41 -> NONTERM_callConv 
    | 42 -> NONTERM_callConv 
    | 43 -> NONTERM_callConv 
    | 44 -> NONTERM_callKind 
    | 45 -> NONTERM_callKind 
    | 46 -> NONTERM_callKind 
    | 47 -> NONTERM_typ 
    | 48 -> NONTERM_typ 
    | 49 -> NONTERM_typ 
    | 50 -> NONTERM_typ 
    | 51 -> NONTERM_typ 
    | 52 -> NONTERM_typ 
    | 53 -> NONTERM_typ 
    | 54 -> NONTERM_typ 
    | 55 -> NONTERM_typ 
    | 56 -> NONTERM_typ 
    | 57 -> NONTERM_typ 
    | 58 -> NONTERM_typ 
    | 59 -> NONTERM_typ 
    | 60 -> NONTERM_typ 
    | 61 -> NONTERM_typ 
    | 62 -> NONTERM_typ 
    | 63 -> NONTERM_typ 
    | 64 -> NONTERM_typ 
    | 65 -> NONTERM_typ 
    | 66 -> NONTERM_typ 
    | 67 -> NONTERM_typ 
    | 68 -> NONTERM_typ 
    | 69 -> NONTERM_typ 
    | 70 -> NONTERM_typ 
    | 71 -> NONTERM_typ 
    | 72 -> NONTERM_typ 
    | 73 -> NONTERM_typ 
    | 74 -> NONTERM_typ 
    | 75 -> NONTERM_typ 
    | 76 -> NONTERM_typ 
    | 77 -> NONTERM_bounds1 
    | 78 -> NONTERM_bounds1 
    | 79 -> NONTERM_bound 
    | 80 -> NONTERM_bound 
    | 81 -> NONTERM_bound 
    | 82 -> NONTERM_bound 
    | 83 -> NONTERM_bound 
    | 84 -> NONTERM_bound 
    | 85 -> NONTERM_id 
    | 86 -> NONTERM_id 
    | 87 -> NONTERM_int32 
    | 88 -> NONTERM_int64 
    | 89 -> NONTERM_float64 
    | 90 -> NONTERM_float64 
    | 91 -> NONTERM_opt_actual_tyargs 
    | 92 -> NONTERM_opt_actual_tyargs 
    | 93 -> NONTERM_actual_tyargs 
    | 94 -> NONTERM_actualTypSpecs 
    | 95 -> NONTERM_actualTypSpecs 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 67 
let _fsyacc_tagOfErrorTerminal = 65

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VOID  -> "VOID" 
  | VARARG  -> "VARARG" 
  | VALUETYPE  -> "VALUETYPE" 
  | VALUE  -> "VALUE" 
  | UNSIGNED  -> "UNSIGNED" 
  | UNMANAGED  -> "UNMANAGED" 
  | UINT8  -> "UINT8" 
  | UINT64  -> "UINT64" 
  | UINT32  -> "UINT32" 
  | UINT16  -> "UINT16" 
  | UINT  -> "UINT" 
  | STRING  -> "STRING" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | RPAREN  -> "RPAREN" 
  | RBRACK  -> "RBRACK" 
  | PLUS  -> "PLUS" 
  | OBJECT  -> "OBJECT" 
  | NATIVE  -> "NATIVE" 
  | METHOD  -> "METHOD" 
  | LPAREN  -> "LPAREN" 
  | LESS  -> "LESS" 
  | LBRACK  -> "LBRACK" 
  | INT8  -> "INT8" 
  | INT64  -> "INT64" 
  | INT32  -> "INT32" 
  | INT16  -> "INT16" 
  | INT  -> "INT" 
  | INSTANCE  -> "INSTANCE" 
  | GREATER  -> "GREATER" 
  | FLOAT64  -> "FLOAT64" 
  | FLOAT32  -> "FLOAT32" 
  | FIELD  -> "FIELD" 
  | EXPLICIT  -> "EXPLICIT" 
  | EOF  -> "EOF" 
  | ELIPSES  -> "ELIPSES" 
  | DOT  -> "DOT" 
  | DEFAULT  -> "DEFAULT" 
  | DCOLON  -> "DCOLON" 
  | COMMA  -> "COMMA" 
  | CLASS  -> "CLASS" 
  | CHAR  -> "CHAR" 
  | BYTEARRAY  -> "BYTEARRAY" 
  | BOOL  -> "BOOL" 
  | BANG  -> "BANG" 
  | AMP  -> "AMP" 
  | VAL_SQSTRING _ -> "VAL_SQSTRING" 
  | VAL_QSTRING _ -> "VAL_QSTRING" 
  | VAL_DOTTEDNAME _ -> "VAL_DOTTEDNAME" 
  | VAL_ID _ -> "VAL_ID" 
  | VAL_HEXBYTE _ -> "VAL_HEXBYTE" 
  | INSTR_VALUETYPE _ -> "INSTR_VALUETYPE" 
  | INSTR_INT_TYPE _ -> "INSTR_INT_TYPE" 
  | INSTR_TYPE _ -> "INSTR_TYPE" 
  | INSTR_TOK _ -> "INSTR_TOK" 
  | INSTR_STRING _ -> "INSTR_STRING" 
  | INSTR_NONE _ -> "INSTR_NONE" 
  | INSTR_METHOD _ -> "INSTR_METHOD" 
  | INSTR_R _ -> "INSTR_R" 
  | INSTR_I8 _ -> "INSTR_I8" 
  | INSTR_I32_I32 _ -> "INSTR_I32_I32" 
  | INSTR_I _ -> "INSTR_I" 
  | VAL_FLOAT64 _ -> "VAL_FLOAT64" 
  | VAL_INT32_ELIPSES _ -> "VAL_INT32_ELIPSES" 
  | VAL_INT64 _ -> "VAL_INT64" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VOID  -> (null : System.Object) 
  | VARARG  -> (null : System.Object) 
  | VALUETYPE  -> (null : System.Object) 
  | VALUE  -> (null : System.Object) 
  | UNSIGNED  -> (null : System.Object) 
  | UNMANAGED  -> (null : System.Object) 
  | UINT8  -> (null : System.Object) 
  | UINT64  -> (null : System.Object) 
  | UINT32  -> (null : System.Object) 
  | UINT16  -> (null : System.Object) 
  | UINT  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | OBJECT  -> (null : System.Object) 
  | NATIVE  -> (null : System.Object) 
  | METHOD  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | INT8  -> (null : System.Object) 
  | INT64  -> (null : System.Object) 
  | INT32  -> (null : System.Object) 
  | INT16  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | INSTANCE  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | FLOAT64  -> (null : System.Object) 
  | FLOAT32  -> (null : System.Object) 
  | FIELD  -> (null : System.Object) 
  | EXPLICIT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ELIPSES  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | DCOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | BYTEARRAY  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | VAL_SQSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_QSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_DOTTEDNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_HEXBYTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_VALUETYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_INT_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_TOK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_NONE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_METHOD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_R _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_I8 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_I32_I32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INSTR_I _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_FLOAT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_INT32_ELIPSES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_INT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 0us; 65535us; 1us; 65535us; 14us; 15us; 2us; 65535us; 0us; 6us; 9us; 10us; 1us; 65535us; 31us; 32us; 2us; 65535us; 0us; 9us; 9us; 9us; 1us; 65535us; 17us; 18us; 1us; 65535us; 17us; 42us; 1us; 65535us; 17us; 43us; 2us; 65535us; 17us; 44us; 45us; 46us; 1us; 65535us; 47us; 48us; 15us; 65535us; 12us; 53us; 14us; 8us; 33us; 53us; 36us; 53us; 38us; 53us; 40us; 53us; 56us; 52us; 57us; 52us; 58us; 53us; 61us; 53us; 80us; 53us; 83us; 53us; 85us; 53us; 136us; 53us; 140us; 53us; 10us; 65535us; 12us; 65us; 33us; 65us; 36us; 65us; 38us; 65us; 40us; 65us; 80us; 63us; 83us; 63us; 85us; 63us; 136us; 65us; 140us; 65us; 12us; 65535us; 12us; 60us; 33us; 60us; 36us; 60us; 38us; 60us; 40us; 60us; 58us; 59us; 61us; 62us; 80us; 60us; 83us; 60us; 85us; 60us; 136us; 60us; 140us; 60us; 3us; 65535us; 80us; 81us; 83us; 84us; 85us; 86us; 7us; 65535us; 12us; 66us; 33us; 66us; 36us; 66us; 38us; 66us; 40us; 66us; 136us; 66us; 140us; 66us; 7us; 65535us; 12us; 13us; 33us; 34us; 36us; 37us; 38us; 39us; 40us; 41us; 136us; 139us; 140us; 141us; 1us; 65535us; 31us; 11us; 3us; 65535us; 31us; 75us; 71us; 72us; 73us; 74us; 12us; 65535us; 2us; 4us; 11us; 12us; 12us; 67us; 17us; 47us; 33us; 67us; 36us; 67us; 38us; 67us; 40us; 67us; 45us; 47us; 68us; 69us; 136us; 67us; 140us; 67us; 2us; 65535us; 57us; 89us; 87us; 89us; 3us; 65535us; 57us; 118us; 87us; 118us; 119us; 120us; 17us; 65535us; 12us; 50us; 14us; 50us; 33us; 50us; 36us; 50us; 38us; 50us; 40us; 50us; 47us; 49us; 54us; 55us; 56us; 50us; 57us; 50us; 58us; 50us; 61us; 50us; 80us; 50us; 83us; 50us; 85us; 50us; 136us; 50us; 140us; 50us; 10us; 65535us; 21us; 22us; 23us; 24us; 24us; 25us; 35us; 36us; 57us; 121us; 87us; 121us; 116us; 117us; 119us; 121us; 122us; 123us; 124us; 125us; 3us; 65535us; 26us; 27us; 28us; 30us; 132us; 133us; 1us; 65535us; 28us; 29us; 2us; 65535us; 15us; 16us; 63us; 64us; 2us; 65535us; 15us; 135us; 63us; 135us; 1us; 65535us; 136us; 137us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 6us; 7us; 9us; 12us; 14us; 17us; 19us; 21us; 23us; 26us; 28us; 44us; 55us; 68us; 72us; 80us; 88us; 90us; 94us; 107us; 110us; 114us; 132us; 143us; 147us; 149us; 152us; 155us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 5us; 2us; 52us; 53us; 54us; 55us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 6us; 31us; 1us; 7us; 1us; 7us; 1us; 9us; 5us; 9us; 52us; 53us; 54us; 55us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 14us; 15us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 22us; 2us; 23us; 25us; 1us; 24us; 1us; 25us; 1us; 25us; 5us; 26us; 52us; 53us; 54us; 55us; 1us; 26us; 1us; 28us; 1us; 29us; 1us; 30us; 2us; 31us; 32us; 3us; 31us; 34us; 35us; 1us; 31us; 1us; 31us; 1us; 32us; 3us; 32us; 52us; 53us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 5us; 39us; 52us; 53us; 54us; 55us; 1us; 40us; 5us; 40us; 52us; 53us; 54us; 55us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 2us; 52us; 53us; 1us; 52us; 2us; 53us; 78us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 4us; 65us; 66us; 67us; 68us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 3us; 73us; 74us; 75us; 1us; 73us; 1us; 74us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 78us; 3us; 80us; 81us; 82us; 2us; 81us; 82us; 1us; 81us; 2us; 83us; 84us; 1us; 83us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 90us; 1us; 90us; 1us; 90us; 1us; 90us; 1us; 92us; 1us; 93us; 2us; 93us; 95us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 95us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 14us; 16us; 18us; 20us; 23us; 25us; 27us; 29us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 101us; 103us; 105us; 111us; 113us; 115us; 117us; 119us; 122us; 126us; 128us; 130us; 132us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 160us; 162us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 205us; 207us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 281us; 284us; 286us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 316us; 318us; 320us; 322us; |]
let _fsyacc_action_rows = 142
let _fsyacc_actionTableElements = [|10us; 16392us; 51us; 38us; 52us; 35us; 53us; 33us; 54us; 40us; 56us; 20us; 57us; 31us; 58us; 28us; 59us; 26us; 60us; 23us; 61us; 21us; 0us; 49152us; 21us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 0us; 49152us; 4us; 32768us; 12us; 92us; 22us; 87us; 34us; 5us; 45us; 91us; 0us; 16386us; 1us; 32768us; 34us; 7us; 0us; 16387us; 1us; 16390us; 36us; 54us; 10us; 16392us; 51us; 38us; 52us; 35us; 53us; 33us; 54us; 40us; 56us; 20us; 57us; 31us; 58us; 28us; 59us; 26us; 60us; 23us; 61us; 21us; 0us; 16391us; 21us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 28us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 12us; 92us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 57us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 45us; 91us; 46us; 127us; 48us; 51us; 49us; 126us; 1us; 32768us; 38us; 14us; 3us; 32768us; 46us; 127us; 48us; 51us; 49us; 126us; 1us; 16475us; 21us; 136us; 1us; 32768us; 20us; 17us; 21us; 16405us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 1us; 32768us; 14us; 19us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 64us; 128us; 0us; 16395us; 1us; 32768us; 64us; 128us; 1us; 32768us; 64us; 128us; 0us; 16396us; 1us; 32768us; 64us; 129us; 0us; 16397us; 3us; 32768us; 30us; 131us; 62us; 130us; 64us; 129us; 0us; 16398us; 0us; 16399us; 4us; 16428us; 1us; 77us; 28us; 71us; 33us; 73us; 37us; 76us; 0us; 16400us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16401us; 1us; 32768us; 64us; 128us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16402us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16403us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16404us; 0us; 16406us; 1us; 16407us; 39us; 45us; 0us; 16408us; 21us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 0us; 16409us; 5us; 16411us; 12us; 92us; 22us; 87us; 45us; 91us; 46us; 127us; 49us; 126us; 0us; 16410us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 2us; 32768us; 15us; 58us; 36us; 54us; 2us; 16418us; 13us; 61us; 36us; 54us; 2us; 32768us; 46us; 127us; 49us; 126us; 0us; 16415us; 3us; 32768us; 46us; 127us; 48us; 51us; 49us; 126us; 6us; 16463us; 15us; 88us; 46us; 127us; 48us; 51us; 49us; 126us; 63us; 124us; 64us; 128us; 3us; 32768us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16416us; 0us; 16417us; 3us; 32768us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16419us; 1us; 16475us; 21us; 136us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 16423us; 12us; 92us; 22us; 87us; 45us; 91us; 21us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 4us; 32768us; 12us; 92us; 14us; 70us; 22us; 87us; 45us; 91us; 0us; 16424us; 2us; 16428us; 1us; 77us; 37us; 76us; 0us; 16425us; 2us; 16428us; 1us; 77us; 37us; 76us; 0us; 16426us; 0us; 16427us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 4us; 32768us; 22us; 56us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16433us; 1us; 32768us; 40us; 83us; 4us; 32768us; 22us; 56us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16434us; 4us; 32768us; 22us; 56us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16435us; 3us; 16463us; 15us; 88us; 63us; 124us; 64us; 128us; 0us; 16436us; 2us; 32768us; 15us; 90us; 39us; 119us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 4us; 32768us; 23us; 103us; 24us; 106us; 25us; 105us; 26us; 104us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 3us; 32768us; 4us; 113us; 10us; 115us; 27us; 112us; 0us; 16457us; 1us; 32768us; 27us; 114us; 0us; 16458us; 0us; 16459us; 1us; 32768us; 64us; 128us; 0us; 16460us; 0us; 16461us; 2us; 16463us; 63us; 124us; 64us; 128us; 0us; 16462us; 1us; 16464us; 35us; 122us; 1us; 16466us; 64us; 128us; 0us; 16465us; 1us; 16468us; 64us; 128us; 0us; 16467us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 1us; 32768us; 20us; 132us; 1us; 32768us; 64us; 129us; 1us; 32768us; 14us; 134us; 0us; 16474us; 0us; 16476us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 2us; 32768us; 29us; 138us; 39us; 140us; 0us; 16477us; 0us; 16478us; 26us; 32768us; 0us; 94us; 2us; 85us; 3us; 82us; 4us; 102us; 6us; 107us; 7us; 110us; 8us; 109us; 9us; 108us; 11us; 78us; 17us; 79us; 18us; 111us; 20us; 68us; 22us; 56us; 23us; 96us; 24us; 99us; 25us; 98us; 26us; 97us; 30us; 101us; 31us; 100us; 40us; 80us; 41us; 93us; 43us; 95us; 44us; 116us; 46us; 127us; 48us; 51us; 49us; 126us; 0us; 16479us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 34us; 35us; 40us; 41us; 43us; 44us; 46us; 57us; 58us; 80us; 109us; 111us; 115us; 117us; 119us; 141us; 143us; 144us; 145us; 147us; 148us; 150us; 152us; 153us; 155us; 156us; 160us; 161us; 162us; 167us; 168us; 195us; 196us; 198us; 225us; 226us; 253us; 254us; 281us; 282us; 283us; 285us; 286us; 308us; 309us; 315us; 316us; 317us; 318us; 319us; 322us; 325us; 328us; 329us; 333us; 340us; 344us; 345us; 346us; 350us; 351us; 353us; 354us; 355us; 356us; 360us; 382us; 387us; 388us; 391us; 392us; 395us; 396us; 397us; 398us; 399us; 400us; 401us; 406us; 407us; 409us; 414us; 415us; 420us; 421us; 425us; 426us; 429us; 430us; 431us; 432us; 433us; 434us; 435us; 436us; 437us; 438us; 439us; 440us; 441us; 446us; 447us; 448us; 449us; 450us; 451us; 452us; 453us; 454us; 458us; 459us; 461us; 462us; 463us; 465us; 466us; 467us; 470us; 471us; 473us; 475us; 476us; 478us; 479us; 480us; 481us; 482us; 483us; 484us; 486us; 488us; 490us; 491us; 492us; 519us; 522us; 523us; 524us; 551us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 1us; 3us; 1us; 2us; 0us; 9us; 1us; 2us; 3us; 2us; 2us; 2us; 2us; 2us; 3us; 2us; 2us; 0us; 1us; 1us; 1us; 3us; 2us; 0us; 1us; 1us; 1us; 3us; 4us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 3us; 2us; 2us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 3us; 2us; 3us; 4us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 2us; 3us; 2us; 2us; 1us; 3us; 0us; 1us; 3us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 0us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 18us; 19us; 19us; 19us; 20us; 20us; 20us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; 24us; 24us; 24us; 25us; 25us; 26us; 27us; 28us; 28us; 29us; 29us; 30us; 31us; 31us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16403us; 65535us; 16404us; 16406us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16412us; 16413us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 16417us; 65535us; 16419us; 65535us; 16420us; 16421us; 16422us; 65535us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 16426us; 16427us; 16429us; 16430us; 16431us; 16432us; 65535us; 16433us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 16436us; 65535us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 65535us; 16449us; 16450us; 16451us; 16452us; 16453us; 16454us; 16455us; 16456us; 65535us; 16457us; 65535us; 16458us; 16459us; 65535us; 16460us; 16461us; 65535us; 16462us; 65535us; 65535us; 16465us; 65535us; 16467us; 16469us; 16470us; 16471us; 16472us; 16473us; 65535us; 65535us; 65535us; 16474us; 16476us; 65535us; 65535us; 16477us; 16478us; 65535us; 16479us; |]
let _fsyacc_reductions ()  =    [| 
# 646 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILInstr array)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startilInstrs));
# 655 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startilType));
# 664 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "ilpars.fsy"
                              resolveMethodSpecScope _1 [] 
                   )
# 156 "ilpars.fsy"
                 : ILType));
# 675 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instrs2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "ilpars.fsy"
                              Array.ofList _1 
                   )
# 160 "ilpars.fsy"
                 : ILInstr array));
# 686 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "ilpars.fsy"
                                        _1 
                   )
# 164 "ilpars.fsy"
                 : 'compQstring));
# 697 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'compQstring)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "ilpars.fsy"
                                                         _1 + _3 
                   )
# 165 "ilpars.fsy"
                 : 'compQstring));
# 709 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "ilpars.fsy"
                                          _1 
                   )
# 167 "ilpars.fsy"
                 : 'methodName));
# 720 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instrs2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "ilpars.fsy"
                               _1 :: _2  
                   )
# 171 "ilpars.fsy"
                 : 'instrs2));
# 732 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "ilpars.fsy"
                            [] 
                   )
# 172 "ilpars.fsy"
                 : 'instrs2));
# 742 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'callConv)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodName)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_actual_tyargs)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArgs0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "ilpars.fsy"
                              let callee_class_typ : ILType = resolveCurrentMethodSpecScope _3 
                              let gscope = (if isILArrTy callee_class_typ then None else Some callee_class_typ.TypeSpec) 
                              let argtys_n_varargs = resolveFormalMethodSpecScope gscope _8 
                              let (argtys,varargs) = decodeVarargs argtys_n_varargs 
                              let minst = resolveCurrentMethodSpecScope _6 
                              let callee_retty = resolveFormalMethodSpecScope gscope _2 
                              (callee_class_typ, _1, _5, argtys, callee_retty, minst), varargs 
                   )
# 178 "ilpars.fsy"
                 : 'methodSpecMaybeArrayMethod));
# 764 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : NoArgInstr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "ilpars.fsy"
                                (_1 ()) 
                   )
# 188 "ilpars.fsy"
                 : 'instr));
# 775 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Int32Instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "ilpars.fsy"
                                (_1 _2) 
                   )
# 190 "ilpars.fsy"
                 : 'instr));
# 787 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Int32Int32Instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "ilpars.fsy"
                                (_1 (_2,_3)) 
                   )
# 192 "ilpars.fsy"
                 : 'instr));
# 800 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Int64Instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "ilpars.fsy"
                                (_1 _2) 
                   )
# 194 "ilpars.fsy"
                 : 'instr));
# 812 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DoubleInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'float64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "ilpars.fsy"
                                (_1 (ILConst.R8 _2)) 
                   )
# 196 "ilpars.fsy"
                 : 'instr));
# 824 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DoubleInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "ilpars.fsy"
                                (_1 (ILConst.R8 (float _2))) 
                   )
# 198 "ilpars.fsy"
                 : 'instr));
# 836 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : MethodSpecInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodSpecMaybeArrayMethod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "ilpars.fsy"
                                
                                    let  ((encl_typ, _cc, nm, _argtys, _retty, _minst) as data),varargs = _2 
                                    if isILArrTy encl_typ then 
                                        let (shape,ty) = destILArrTy encl_typ 
                                        match nm with
                                        | "Get" -> I_ldelem_any(shape,ty) 
                                        | "Set" ->  I_stelem_any(shape,ty) 
                                        | "Address" ->  I_ldelema(NormalAddress, shape,ty) 
                                        | ".ctor" ->   I_newarr(shape,ty) 
                                        | _ -> failwith "bad method on array type"
                                    else 
                                        _1 (mkILMethSpecInTy data, varargs) 
                   )
# 200 "ilpars.fsy"
                 : 'instr));
# 859 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TypeInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "ilpars.fsy"
                               _1 (resolveCurrentMethodSpecScope _2) 
                   )
# 213 "ilpars.fsy"
                 : 'instr));
# 871 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IntTypeInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "ilpars.fsy"
                               _1 ( _2,resolveCurrentMethodSpecScope _3) 
                   )
# 215 "ilpars.fsy"
                 : 'instr));
# 884 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ValueTypeInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "ilpars.fsy"
                               _1 (resolveCurrentMethodSpecScope _2) 
                   )
# 217 "ilpars.fsy"
                 : 'instr));
# 896 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "ilpars.fsy"
                                (_1 (ILToken.ILType (resolveCurrentMethodSpecScope _2)))  
                   )
# 219 "ilpars.fsy"
                 : 'instr));
# 908 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "ilpars.fsy"
                                noMethodSpecScope [] 
                   )
# 226 "ilpars.fsy"
                 : 'sigArgs0));
# 918 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArgs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "ilpars.fsy"
                                       _1 
                   )
# 227 "ilpars.fsy"
                 : 'sigArgs0));
# 929 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArgs1a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "ilpars.fsy"
                               ResolvedAtMethodSpecScope (fun c -> List.map (fun obj -> resolveMethodSpecScope obj c) (List.rev _1)) 
                   )
# 231 "ilpars.fsy"
                 : 'sigArgs1));
# 940 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "ilpars.fsy"
                               [_1] 
                   )
# 235 "ilpars.fsy"
                 : 'sigArgs1a));
# 951 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArgs1a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "ilpars.fsy"
                               _3:: _1 
                   )
# 237 "ilpars.fsy"
                 : 'sigArgs1a));
# 963 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "ilpars.fsy"
                              resolveMethodSpecScopeThen _1 (fun ty -> 
                              noMethodSpecScope (SigArg(_2, ty))) 
                   )
# 241 "ilpars.fsy"
                 : 'sigArg));
# 976 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "ilpars.fsy"
                                None 
                   )
# 246 "ilpars.fsy"
                 : 'opt_id));
# 986 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "ilpars.fsy"
                                              Some _1 
                   )
# 246 "ilpars.fsy"
                 : 'opt_id));
# 997 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "ilpars.fsy"
                               _1 
                   )
# 254 "ilpars.fsy"
                 : string));
# 1008 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "ilpars.fsy"
                               _1 
                   )
# 256 "ilpars.fsy"
                 : string));
# 1019 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "ilpars.fsy"
                               _1 + "." + _3 
                   )
# 258 "ilpars.fsy"
                 : string));
# 1031 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'slashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "ilpars.fsy"
                               let (enc,nm) = _4 
                               let aref = findAssemblyRef _2 
                               ILScopeRef.Assembly aref, enc, nm 
                   )
# 262 "ilpars.fsy"
                 : 'className));
# 1045 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'slashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "ilpars.fsy"
                               let enc, nm = _1 in (ILScopeRef.Local, enc, nm) 
                   )
# 266 "ilpars.fsy"
                 : 'className));
# 1056 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "ilpars.fsy"
                               ([],_1) 
                   )
# 270 "ilpars.fsy"
                 : 'slashedName));
# 1067 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'slashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "ilpars.fsy"
                               let (enc,nm) = _3 in (_1::enc, nm)  
                   )
# 272 "ilpars.fsy"
                 : 'slashedName));
# 1079 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'className)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_actual_tyargs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "ilpars.fsy"
                               let (a,b,c) = _1 
                               resolveMethodSpecScopeThen _2 (fun inst -> 
                               noMethodSpecScope ( (mkILTySpec ( (mkILNestedTyRef (a,b,c)), inst)))) 
                   )
# 276 "ilpars.fsy"
                 : 'typeNameInst));
# 1093 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'className)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "ilpars.fsy"
                               let (a,b,c) = _1 
                               noMethodSpecScope ( (mkILTySpec ( (mkILNestedTyRef (a,b,c)), emptyILGenericArgs))) 
                   )
# 283 "ilpars.fsy"
                 : 'typeName));
# 1105 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "ilpars.fsy"
                               resolveMethodSpecScopeThen _1 (fun tref -> 
                               noMethodSpecScope (ILType.Boxed tref))  
                   )
# 289 "ilpars.fsy"
                 : 'typSpec));
# 1117 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "ilpars.fsy"
                               _1 
                   )
# 292 "ilpars.fsy"
                 : 'typSpec));
# 1128 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "ilpars.fsy"
                               _2 
                   )
# 294 "ilpars.fsy"
                 : 'typSpec));
# 1139 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'callKind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "ilpars.fsy"
                               Callconv (ILThisConvention.Instance,_2) 
                   )
# 299 "ilpars.fsy"
                 : 'callConv));
# 1150 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'callKind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "ilpars.fsy"
                               Callconv (ILThisConvention.InstanceExplicit,_2) 
                   )
# 301 "ilpars.fsy"
                 : 'callConv));
# 1161 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'callKind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "ilpars.fsy"
                               Callconv (ILThisConvention.Static,_1) 
                   )
# 303 "ilpars.fsy"
                 : 'callConv));
# 1172 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "ilpars.fsy"
                             ILArgConvention.Default 
                   )
# 307 "ilpars.fsy"
                 : 'callKind));
# 1182 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "ilpars.fsy"
                             ILArgConvention.Default 
                   )
# 309 "ilpars.fsy"
                 : 'callKind));
# 1192 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "ilpars.fsy"
                             ILArgConvention.VarArg 
                   )
# 311 "ilpars.fsy"
                 : 'callKind));
# 1202 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_String 
                   )
# 320 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1212 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_Object 
                   )
# 322 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1222 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "ilpars.fsy"
                              resolveMethodSpecScopeThen _2 (fun tspec -> 
                               noMethodSpecScope (ILType.Boxed tspec)) 
                   )
# 324 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1234 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "ilpars.fsy"
                              resolveMethodSpecScopeThen _3 (fun tspec -> 
                              noMethodSpecScope (ILType.Value tspec)) 
                   )
# 327 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1246 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "ilpars.fsy"
                              resolveMethodSpecScopeThen _2 (fun tspec -> 
                              noMethodSpecScope (ILType.Value tspec)) 
                   )
# 330 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1258 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "ilpars.fsy"
                              resolveMethodSpecScopeThen _1 (fun ty -> noMethodSpecScope (mkILArr1DTy ty)) 
                   )
# 333 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1269 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bounds1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "ilpars.fsy"
                              resolveMethodSpecScopeThen _1 (fun ty -> noMethodSpecScope (mkILArrTy (ty,ILArrayShape _3))) 
                   )
# 335 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1281 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "ilpars.fsy"
                              resolveMethodSpecScopeThen _1 (fun ty -> noMethodSpecScope (ILType.Byref ty)) 
                   )
# 337 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1292 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ILType ResolvedAtMethodSpecScope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "ilpars.fsy"
                              resolveMethodSpecScopeThen _1 (fun ty -> noMethodSpecScope (ILType.Ptr ty)) 
                   )
# 339 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1303 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_char 
                   )
# 341 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1313 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 343 "ilpars.fsy"
                              noMethodSpecScope ILType.Void 
                   )
# 343 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1323 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_bool 
                   )
# 345 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1333 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_int8 
                   )
# 347 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1343 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 349 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_int16 
                   )
# 349 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1353 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 351 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_int32 
                   )
# 351 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1363 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_int64 
                   )
# 353 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1373 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_float32 
                   )
# 355 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1383 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_float64 
                   )
# 357 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1393 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint8 
                   )
# 359 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1403 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint16 
                   )
# 361 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1413 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint32 
                   )
# 363 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1423 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 365 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint64 
                   )
# 365 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1433 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint8 
                   )
# 367 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1443 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 369 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint16 
                   )
# 369 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1453 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 371 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint32 
                   )
# 371 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1463 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_uint64 
                   )
# 373 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1473 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 375 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_IntPtr 
                   )
# 375 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1483 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 377 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_UIntPtr 
                   )
# 377 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1493 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "ilpars.fsy"
                              noMethodSpecScope (!parseILGlobals).typ_UIntPtr 
                   )
# 379 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1503 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 382 "ilpars.fsy"
                              noMethodSpecScope (ILType.TypeVar (uint16 ( _2)))  
                   )
# 382 "ilpars.fsy"
                 : ILType ResolvedAtMethodSpecScope));
# 1514 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bound)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "ilpars.fsy"
                              [_1] 
                   )
# 387 "ilpars.fsy"
                 : 'bounds1));
# 1525 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bounds1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bound)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 389 "ilpars.fsy"
                              _1 @ [_3] 
                   )
# 389 "ilpars.fsy"
                 : 'bounds1));
# 1537 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 393 "ilpars.fsy"
                              (None, None) 
                   )
# 393 "ilpars.fsy"
                 : 'bound));
# 1547 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "ilpars.fsy"
                              (None, Some _1) 
                   )
# 395 "ilpars.fsy"
                 : 'bound));
# 1558 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 397 "ilpars.fsy"
                              (Some _1, Some (_3 - _1 + 1)) 
                   )
# 397 "ilpars.fsy"
                 : 'bound));
# 1570 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "ilpars.fsy"
                              (Some _1, None) 
                   )
# 399 "ilpars.fsy"
                 : 'bound));
# 1581 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 406 "ilpars.fsy"
                              (Some _1, Some (_2 - _1 + 1)) 
                   )
# 406 "ilpars.fsy"
                 : 'bound));
# 1593 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 408 "ilpars.fsy"
                              (Some _1, None) 
                   )
# 408 "ilpars.fsy"
                 : 'bound));
# 1604 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 412 "ilpars.fsy"
                              _1 
                   )
# 412 "ilpars.fsy"
                 : 'id));
# 1615 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 414 "ilpars.fsy"
                              _1 
                   )
# 414 "ilpars.fsy"
                 : 'id));
# 1626 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 418 "ilpars.fsy"
                              int32 _1 
                   )
# 418 "ilpars.fsy"
                 : 'int32));
# 1637 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 422 "ilpars.fsy"
                              _1 
                   )
# 422 "ilpars.fsy"
                 : 'int64));
# 1648 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "ilpars.fsy"
                              _1 
                   )
# 426 "ilpars.fsy"
                 : 'float64));
# 1659 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 428 "ilpars.fsy"
                              System.BitConverter.Int64BitsToDouble _3 
                   )
# 428 "ilpars.fsy"
                 : 'float64));
# 1670 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 432 "ilpars.fsy"
                               noMethodSpecScope emptyILGenericArgs 
                   )
# 432 "ilpars.fsy"
                 : 'opt_actual_tyargs));
# 1680 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'actual_tyargs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 434 "ilpars.fsy"
                               resolveMethodSpecScopeThen _1 (fun res -> 
                               noMethodSpecScope  res) 
                   )
# 434 "ilpars.fsy"
                 : 'opt_actual_tyargs));
# 1692 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'actualTypSpecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 439 "ilpars.fsy"
                               _2 
                   )
# 439 "ilpars.fsy"
                 : 'actual_tyargs));
# 1703 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 443 "ilpars.fsy"
                               resolveMethodSpecScopeThen _1 (fun res -> 
                               noMethodSpecScope [ res]) 
                   )
# 443 "ilpars.fsy"
                 : 'actualTypSpecs));
# 1715 "ilpars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'actualTypSpecs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 446 "ilpars.fsy"
                               resolveMethodSpecScopeThen _1 (fun x -> 
                               resolveMethodSpecScopeThen _3 (fun y -> 
                               noMethodSpecScope (x @ [ y]))) 
                   )
# 446 "ilpars.fsy"
                 : 'actualTypSpecs));
|]
# 1730 "ilpars.fs"
let tables () : Internal.Utilities.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Internal.Utilities.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 68;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let ilInstrs lexer lexbuf : ILInstr array =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let ilType lexer lexbuf : ILType =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
